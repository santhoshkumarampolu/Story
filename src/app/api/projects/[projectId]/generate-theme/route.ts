import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: Request, { params }: { params: Promise<{ projectId: string }> }) {
  const { projectId } = await params;
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    if (!projectId) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 });
    }
    const { idea, logline, treatment } = await request.json();
    if (!idea || !logline || !treatment) {
      return NextResponse.json({ error: 'Idea, logline, and treatment are required' }, { status: 400 });
    }
    // Optionally verify project ownership
    const project = await prisma.project.findUnique({
      where: { id: projectId, userId: session.user.id },
    });
    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }
    // Compose prompt for OpenAI
    const prompt = `Given the following story details, generate a concise list of 2-4 cinematic themes that would be explored in the film. Each theme should be a short phrase or sentence, focusing on universal, emotional, or philosophical ideas (e.g., "The cost of ambition", "Redemption through sacrifice", "The search for identity").\n\nIdea: ${idea}\nLogline: ${logline}\nTreatment: ${treatment}\n\nThemes:`;
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 200,
      temperature: 0.7,
    });
    const generatedContent = completion.choices[0]?.message?.content?.trim();
    if (!generatedContent) {
      throw new Error('No content generated by OpenAI.');
    }
    return NextResponse.json({ theme: generatedContent });
  } catch (error) {
    console.error('[API - Generate Theme] Error:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    return NextResponse.json({ error: errorMessage, details: error instanceof Error ? error.stack : null }, { status: 500 });
  }
} 