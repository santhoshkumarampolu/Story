// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String? // Hashed password for email/password auth
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tokenUsage    TokenUsage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String    @id @default(cuid())
  title         String
  description   String?
  language      String?
  type          String    @default("story") // story, shortfilm, screenplay
  logline       String?   @db.Text
  idea          String?   @db.Text // Store JSON string with concept, conflict, emotionalHook, visualStyle, uniqueElement
  generatedIdeas Json?    // Store array of generated ideas
  treatment     String?   @db.Text
  structureType String?   // "three-act", "twist", "slice-of-life", "character-study"
  version       Int       @default(1)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stories       Story[]
  scenes        Scene[]
  characters    Character[]
  revisions     Revision[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cards         Card[]
  tokenUsage    TokenUsage[]
  shares        Share[]
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Scene {
  id            String          @id @default(cuid())
  title         String
  summary       String
  script        String?         @db.Text
  storyboard    String?
  order         Int             @default(0)
  act           String?         // "act1", "act2", "act3"
  notes         String?         @db.Text
  version       Int             @default(1)
  projectId     String
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  revisions     SceneRevision[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([projectId])
}

model Revision {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  version     Int
  changes     String   @db.Text
  type        String   // "script", "structure", "character", "treatment"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

model SceneRevision {
  id          String   @id @default(cuid())
  sceneId     String
  scene       Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  version     Int
  script      String   @db.Text
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sceneId])
}

model Character {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.Text
  motivation    String?  @db.Text
  backstory     String?  @db.Text
  arc           String?  @db.Text
  relationships String?  @db.Text
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
}

model Card {
  id        String   @id @default(cuid())
  type      String // story, scene, act, dialogue, shortfilm, advertisement
  content   String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TokenUsage {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  type      String   // "script" or "storyboard"
  tokens    Int
  cost      Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Share {
  id        String   @id @default(cuid())
  token     String   @unique
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}
