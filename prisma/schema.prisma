// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String? // Hashed password for email/password auth
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tokenUsages   TokenUsage[] // Added relation for TokenUsage
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  subscriptionStatus String? @default("free") // 'free', 'pro', 'admin'
  isAdmin       Boolean      @default(false)
  tokenUsageThisMonth Int    @default(0)
  imageUsageThisMonth Int    @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String       @id @default(cuid())
  title          String
  description    String?
  language       String? // For UI language preference or project content language
  type           String?      @default("story") // story, shortfilm, screenplay, novel, shortstory, synopsis
  genre          String?      // Story genre
  tone           String?      // Story tone/mood
  theme          String?      // Central theme
  visualStyle    String?      // Visual style/aesthetic for the project
  keyVisualMoments String?    // Key visual moments or motifs
  targetLength   Int?         // Word count goal
  logline        String?      @db.Text
  idea           String?      @db.Text
  treatment      String?      @db.Text
  structureType  String? 
  fullScript     String?      @db.Text // For screenplays
  worldBuilding  String?      @db.Text // For novels/fantasy
  blurb          String?      @db.Text // Book description/synopsis
  plotPoints     String?      @db.Text // Plot points and story structure
  version        Int          @default(1)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  stories        Story[]
  scenes         Scene[] // Scenes for films, Chapters for novels
  characters     Character[] // Added relation
  cards          Card[] // Added relation
  outlineBeats   OutlineBeat[] // Story structure beats
  narrativeDrafts NarrativeDraft[] // Story drafts
  chapters       Chapter[] // For novels
  tokenUsages    TokenUsage[] // Added relation for TokenUsage
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Character {
  id            String   @id @default(cuid())
  name          String
  description   String
  motivation    String?
  backstory     String?
  arc           String?
  relationships String?
  goals         String?
  conflicts     String?
  personality   String?
  traits        String[]
  imagePath     String?
  notes         String?
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
}

model Scene {
  id          String   @id @default(cuid())
  title       String
  summary     String
  script      String?
  storyboard  String?
  order       Int      @default(0)
  act         String?
  location    String?
  timeOfDay   String?
  goals       String?
  conflicts   String?
  notes       String?
  version     Int      @default(1)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

// New models for story template features
model OutlineBeat {
  id        String   @id @default(cuid())
  order     Int
  title     String?
  summary   String   @db.Text
  beatType  String?  // "inciting-incident", "midpoint", "climax", "resolution"
  act       String?  // Which act this beat belongs to
  notes     String?  @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Chapter {
  id        String   @id @default(cuid())
  order     Int
  title     String
  summary   String?  @db.Text
  content   String?  @db.Text
  wordCount Int?
  goals     String?  @db.Text
  conflicts String?  @db.Text
  notes     String?  @db.Text
  version   Int      @default(1)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model NarrativeDraft {
  id        String    @id @default(cuid())
  type      String    // "full-story", "chapter", "synopsis", "film-narrative"
  title     String?
  content   String    @db.Text
  version   Int       @default(1)
  wordCount Int?
  notes     String?   @db.Text
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([projectId])
}

model Card {
  id        String   @id @default(cuid())
  type      String // e.g., story, scene, act, dialogue, shortfilm, advertisement
  content   String   @db.Text
  order     Int
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model TokenUsage {
  id        String   @id @default(cuid())
  type      String // e.g., "translation", "generation", "image", "logline", "scenes", "character_generation"
  tokens    Int
  cost      Float    @default(0) // Cost in some unit, e.g., USD cents
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // New fields for detailed tracking
  modelUsed        String? // Stores the specific model string, e.g., "gpt-3.5-turbo-1106"
  promptTokens     Int?    // Stores the number of prompt tokens
  completionTokens Int?    // Stores the number of completion tokens
  operationName    String? // A more descriptive name for the operation, e.g., "Scene Generation"

  @@index([userId])
  @@index([projectId])
}
