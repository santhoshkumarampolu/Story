// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String? // Hashed password for email/password auth
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tokenUsages   TokenUsage[] // Added relation for TokenUsage
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String       @id @default(cuid())
  title          String
  description    String?
  language       String? // For UI language preference or project content language
  type           String?      @default("story") // story, shortfilm, screenplay
  logline        String?
  idea           String?
  generatedIdeas Json?
  treatment      String?      @db.Text
  structureType  String? // "three-act", "twist", etc.
  version        Int          @default(1)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  stories        Story[]
  scenes         Scene[] // Added relation
  characters     Character[] // Added relation
  cards          Card[] // Added relation
  tokenUsages    TokenUsage[] // Added relation for TokenUsage
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Character {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.Text
  motivation    String?  @db.Text
  backstory     String?  @db.Text
  arc           String?  @db.Text
  relationships String?  @db.Text
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
}

model Scene {
  id         String   @id @default(cuid())
  title      String
  summary    String   @db.Text
  script     String?  @db.Text
  storyboard String? // Could be JSON for fabric.js or a URL
  order      Int      @default(0)
  act        String? // e.g., "act1", "act2", "act3"
  notes      String?  @db.Text
  version    Int      @default(1)
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([projectId])
}

model Card {
  id        String   @id @default(cuid())
  type      String // e.g., story, scene, act, dialogue, shortfilm, advertisement
  content   String   @db.Text
  order     Int
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model TokenUsage {
  id        String   @id @default(cuid())
  type      String // e.g., "translation", "generation", "image"
  tokens    Int
  cost      Float    @default(0) // Cost in some unit, e.g., USD cents
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}
